<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY anduin-download               "http://anduin.linuxfromscratch.org/files/BLFS/OpenJDK-&openjdk-version;-&icedtea-version;">
  <!ENTITY icedtea-download              "http://icedtea.classpath.org/download/source/icedtea-&icedtea-version;.tar.xz">

  <!ENTITY icedtea-md5sum                "6c57b54ab8b7916425d567dbb478ad73">
  <!ENTITY icedtea-size                  "1.9 MB">

  <!ENTITY corba-download                "&anduin-download;/corba.tar.bz2">
  <!ENTITY corba-md5sum                  "86cf23060d726aa55d77bffedb8b6a99">
  <!ENTITY corba-size                    "1.0 MB">

  <!ENTITY hotspot-download              "&anduin-download;/hotspot.tar.bz2">
  <!ENTITY hotspot-md5sum                "026bb8ca9e764fe53b8a19f1ddad1479">
  <!ENTITY hotspot-size                  "7.4 MB">

  <!ENTITY jaxp-download                 "&anduin-download;/jaxp.tar.bz2">
  <!ENTITY jaxp-md5sum                   "cbd3226b916fe9e6c7e9f1cd15e54d55">
  <!ENTITY jaxp-size                     "2.6 MB">

  <!ENTITY jaxws-download                "&anduin-download;/jaxws.tar.bz2">
  <!ENTITY jaxws-md5sum                  "84b921fc3e328eea770dc1a092e240dc">
  <!ENTITY jaxws-size                    "1.9 MB">

  <!ENTITY jdk-download                  "&anduin-download;/jdk.tar.bz2">
  <!ENTITY jdk-md5sum                    "b5a4703501bf4a6adeaa614e6d2345b3">
  <!ENTITY jdk-size                      "30.2 MB">

  <!ENTITY langtools-download            "&anduin-download;/langtools.tar.bz2">
  <!ENTITY langtools-md5sum              "e104e60e44aba0a8bc60c48df1d859b9">
  <!ENTITY langtools-size                "1.6 MB">

  <!ENTITY openjdk-download              "&anduin-download;/openjdk.tar.bz2">
  <!ENTITY openjdk-md5sum                "f48d6f8b748f869a5624d2c44998d54c">
  <!ENTITY openjdk-size                  "122 KB">

  <!ENTITY rhino-download                "https://github.com/downloads/mozilla/rhino/rhino1_7R4.zip">
  <!ENTITY rhino-md5sum                  "ad67a3dff135e3a70f0c3528a2d6edf2">
  <!ENTITY rhino-size                    "6.2 MB">

  <!ENTITY icedtea-web-download          "http://icedtea.classpath.org/download/source/icedtea-web-&icedtea-web-version;.tar.gz">

  <!ENTITY openjdk-buildsize             "8-10 GB">
  <!ENTITY openjdk-time                  "28-36 SBU (an additional 100 SBU for testsuite)">
]>

<sect1 id="openjdk"
       xreflabel="OpenJDK-&openjdk-version;/IcedTea-&icedtea-version;">
  <?dbhtml filename="openjdk.html" ?>

  <sect1info>
    <othername>$LastChangedBy: krejzi $</othername>
    <date>$Date: 2014-10-26 18:38:54 +0100 (Sun, 26 Oct 2014) $</date>
  </sect1info>

  <title>OpenJDK-&openjdk-version;/IcedTea-&icedtea-version;</title>

  <indexterm zone="openjdk">
    <primary sortas="a-OpenJDK">OpenJDK</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to OpenJDK and IcedTea</title>

    <para><application>IcedTea</application> provides a build harness for the
    <application>OpenJDK</application> package, Oracle's open-sourced
    <application>Java</application> development environment. In order to
    provide a completely free runtime environment, similar to Oracle's closed
    distribution, the <application>IcedTea</application> build harness also
    provides free, and arguably better versions of parts of the JDK which
    have not been open-sourced to date. <application>OpenJDK</application> is
    useful for developing <application>Java</application> programs and provides
    a complete runtime environment to run <application>Java</application>
    programs.</para>

    &lfs76_checked;

    <note><para>The browser plugin and webstart implementation have been split
    off into a separate project. To provide a complete implementation, you will
    need to later install <xref linkend="icedtea-web"/>.</para></note>

    <para>OpenJDK is GPL'd code, however, it should be explained that there has
    been a special exception made for non-free projects to use these classes in
    their proprietary products. In similar fashion to the LGPL, which
    allows non-free programs to link to libraries provided by free software,
    the <ulink url="http://openjdk.java.net/legal/gplv2+ce.html">GNU
    General Public License, version 2, with the Classpath Exception</ulink>
    allows third party programs to use classes provided by free software
    without the requirement that the third party software also be free. As with
    the LGPL, any modifications made to the free software portions of a
    third party application, must also be made freely available.</para>

    <note>
      <para>The IcedTea build environment includes a very thorough, open source
      test suite titled <application>JTreg</application>.
      <application>JTreg</application> is intended to test the just built JDK
      for reasonable compatibility with the closed Oracle JDK.  However, in
      order for an independent implementation to claim compatibility, including
      the Oracle sponsored <application>OpenJDK</application> project, it must
      pass a closed <application>JCK/TCK</application> test suite.  No claims
      of compatibility, even partial compatibility,  may be made without
      passing an approved test suite.</para>

      <para>Oracle does provide free community access, on a case by case basis,
      to a closed toolkit to ensure 100% compatibility with its proprietary JDK.
      The binary version provided here has not been tested against the
      <ulink url="http://openjdk.java.net/groups/conformance/JckAccess/jck-access.html">
      TCK</ulink>. Any version that is built using the instructions given,
      cannot claim to be compatible with the proprietary JDK, without the user
      applying for, and completing the compatibility tests themselves.</para>

      <para>With that in mind, the binaries produced using this build method are
      regularly tested against the TCK by the members listed on the site above.
      In addition to the community license above, an educational, non-commercial
      license for the TCK can be obtained from
      <ulink url="http://www.oracle.com/technetwork/java/index-137188.html">
      here</ulink>.</para>
    </note>

    <bridgehead renderas="sect3">Source Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>IcedTea Source Package
          <simplelist>
            <member>Download: <ulink url="&icedtea-download;"/></member>
            <member>Download MD5 sum: &icedtea-md5sum;</member>
            <member>Download Size: &icedtea-size;</member>
          </simplelist>
        </para>
      </listitem>
    </itemizedlist>

    <para>The following may be downladed separately or be done as a
    part of the <command>make</command> process. For convenience 
    the BLFS editors have made the files available in an LFS website.
    The files are not distributed with versions, but extracted from
    the OpenJDK version control system at specified (tagged) points.</para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>Corba Source
          <simplelist>
            <member>Download: <ulink url="&corba-download;"/></member>
            <member>Download MD5 sum: &corba-md5sum;</member>
            <member>Download Size: &corba-size;</member>
          </simplelist>
        </para>
      </listitem>
      <listitem>
        <para>Hotspot Source
          <simplelist>
            <member>Download: <ulink url="&hotspot-download;"/></member>
            <member>Download MD5 sum: &hotspot-md5sum;</member>
            <member>Download Size: &hotspot-size;</member>
          </simplelist>
        </para>
      </listitem>
      <listitem>
        <para>IcedTea Build Source
          <simplelist>
            <member>Download: <ulink url="&openjdk-download;"/></member>
            <member>Download MD5 sum: &openjdk-md5sum;</member>
            <member>Download Size: &openjdk-size;</member>
          </simplelist>
        </para>
      </listitem>
      <listitem>
        <para>JAXP Source
          <simplelist>
            <member>Download: <ulink url="&jaxp-download;"/></member>
            <member>Download MD5 sum: &jaxp-md5sum;</member>
            <member>Download Size: &jaxp-size;</member>
          </simplelist>
        </para>
      </listitem>
      <listitem>
        <para>JAXWS Source
          <simplelist>
            <member>Download: <ulink url="&jaxws-download;"/></member>
            <member>Download MD5 sum: &jaxws-md5sum;</member>
            <member>Download Size: &jaxws-size;</member>
          </simplelist>
        </para>
      </listitem>
      <listitem>
        <para>Langtools Source
          <simplelist>
            <member>Download: <ulink url="&langtools-download;"/></member>
            <member>Download MD5 sum: &langtools-md5sum;</member>
            <member>Download Size: &langtools-size;</member>
          </simplelist>
        </para>
      </listitem>
      <listitem>
        <para>OpenJDK Source
          <simplelist>
            <member>Download: <ulink url="&jdk-download;"/></member>
            <member>Download MD5 sum: &jdk-md5sum;</member>
            <member>Download Size: &jdk-size;</member>
          </simplelist>
        </para>
      </listitem>
      <listitem>
        <para>Estimated disk space required: &openjdk-buildsize;</para>
      </listitem>
      <listitem>
        <para>Estimated build time: &openjdk-time;</para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>

    <bridgehead renderas="sect4">Required Patches</bridgehead>
    <itemizedlist spacing='compact'>
      <listitem>
        <para>
          <ulink
            url="&patch-root;/icedtea-&icedtea-version;-add_cacerts-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink
            url="&patch-root;/icedtea-&icedtea-version;-fixed_paths-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink
            url="&patch-root;/icedtea-&icedtea-version;-fix_new_giflib-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink
            url="&patch-root;/icedtea-&icedtea-version;-fix_tests-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect4">Required JAR</bridgehead>
    <itemizedlist spacing='compact'>
      <listitem>
        <para>Rhino Java Script
          <simplelist>
            <member>Download: <ulink url="&rhino-download;"/></member>
            <member>Download MD5 sum: &rhino-md5sum;</member>
            <member>Download Size: &rhino-size;</member>
          </simplelist>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect4">Optional package (to obtain an icon for the
      <filename>openjdk-7-policytool.desktop</filename> file)</bridgehead>
    <itemizedlist spacing='compact'>
      <listitem>
        <para>
          <ulink url="&icedtea-web-download;"/>
        </para>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3">OpenJDK Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required Dependencies</bridgehead>
    <para role="required">
      An existing binary ( <xref linkend="java"/> or an earlier built 
      version of this package),
      <xref linkend="alsa-lib"/>,
      <xref linkend="apache-ant"/>,
      <xref linkend="cacerts"/>,
      <xref linkend="cpio"/>,
      <xref linkend="cups"/>,
      <xref linkend="gtk2"/>,
      <xref linkend="giflib"/>,
      <xref linkend="unzip"/>,
      <xref linkend="wget"/>,
      <xref linkend="which"/>,
      <xref linkend="xorg7-lib"/>, and 
      <xref linkend="zip"/>
    </para>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">
      <xref linkend="junit"/> and
      <xref linkend="nss"/>
    </para>

    <bridgehead renderas="sect4">Optional</bridgehead>
    <para role="optional">
      <xref linkend="libxslt"/>,
      <xref linkend="lsb-release"/>,
      <xref linkend="mercurial"/>,
      <xref linkend="mitkrb"/>,
<!-- Audio support has beeen moved to icedtea-sound
      <xref linkend="pulseaudio"/>, --> and
      <xref linkend="xorg-server"/> (for the tests)
    </para>

    <para condition="html" role="usernotes">User Notes:
    <ulink url="&blfs-wiki;/openjdk"/></para>

  </sect2>

  <sect2 role="installation">
    <title>Installation of OpenJDK</title>

    <note><para>The source build of OpenJDK requires <xref
    linkend="apache-ant"/>.  You'll need to build that first to satisfy the
    circular dependency, and return to this section to continue building
    OpenJDK.</para></note>

    <para>Unlike other packages in BLFS, the <application>OpenJDK</application>
    source packages are distributed in multiple downloads. Since the IcedTea
    build harness will be used to build <application>OpenJDK</application>,
    begin by extracting the IcedTea package and changing into the
    extracted directory.</para>

    <para>The IcedTea <application>OpenJDK</application> distribution requires
    that <filename>js.jar</filename> (from the Rhino package) be in place in
    order to provide a java-script implementation for the free JDK. If you have
    not installed the js.jar file in another way, do so with the following
    commands as the <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>unzip ../rhino1_7R4.zip             &amp;&amp;
install -v -d -m755 /usr/share/java &amp;&amp;
install -v -m755 rhino1_7R4/*.jar /usr/share/java</userinput></screen>

    <para>As mentioned previously, <application>OpenJDK</application> is
    composed of several individual projects of the proprietary
    <application>JDK</application> that have been relicensed under an open
    source license.  If you have already downloaded all of the individual
    components, place them into the source tree with the following
    commands:</para>

<screen><userinput>cp -v ../corba.tar.bz2     . &amp;&amp;
cp -v ../hotspot.tar.bz2   . &amp;&amp;
cp -v ../jaxp.tar.bz2      . &amp;&amp;
cp -v ../jaxws.tar.bz2     . &amp;&amp;
cp -v ../jdk.tar.bz2       . &amp;&amp;
cp -v ../langtools.tar.bz2 . &amp;&amp;
cp -v ../openjdk.tar.bz2   .</userinput></screen>

    <para>Apply a patch to generate a valid cacerts file using the system CA
    certificates:</para>

<screen><userinput>patch -Np1 -i ../icedtea-&icedtea-version;-add_cacerts-1.patch</userinput></screen>

    <para>Apply a patch to replace fixed paths with ones appropriate for
    BLFS:</para>

<screen><userinput>patch -Np1 -i ../icedtea-&icedtea-version;-fixed_paths-1.patch</userinput></screen>

    <para>Apply a patch to adapt the code to the new giflib API:</para>

<screen><userinput>patch -Np1 -i ../icedtea-&icedtea-version;-fix_new_giflib-1.patch</userinput></screen>

    <para>Apply a patch to exclude known broken tests from the test
    suite:</para>

<screen><userinput>patch -Np1 -i ../icedtea-&icedtea-version;-fix_tests-1.patch</userinput></screen>

    <note>
      <para>
         Before proceeding, you should ensure that your environment is
         properly set for building <application>OpenJDK</application>. First,
         review the content of the <envar>ANT_HOME</envar> variable.
         Second, the <envar>PATH</envar> variable should contain the paths to
         the <command>java</command> and <command>ant</command> executables.
         Last, the <envar>CLASSPATH</envar> variable should be set as
         explained on the <xref linkend="java"/> and <xref linkend="junit"/>
         pages.
       </para>
    </note>
    <para>Configure and build the package with the following commands
    (--with-pkgversion and --with-version-suffix values can be modified to fit
    user preferences):</para>

<screen><userinput>unset JAVA_HOME                                               &amp;&amp;
./autogen.sh                                                  &amp;&amp;
./configure --with-jdk-home=/opt/OpenJDK-&openjdk-version;-bin         \
            --with-version-suffix=BLFS                        \
            --enable-nss                                      \
            --disable-system-kerberos                         \
            --with-parallel-jobs                              &amp;&amp;
make</userinput></screen>

    <note><para>If you have not installed the tarballs specified above,
    they will be automatically downloaded here.</para></note>

    <para>To test the results, issue: <command>make jtregcheck</command>. The
    included version of <application>jtreg</application> is old, and the test
    suite is also very dependent on the host system and the environment that it
    is run in. You should expect to see anywhere between 40 and 100 failures in
    jdk with up to 10 errors in the tests themselves.  The majority of the
    6000+ tests should pass. The reason for the greatly varying results is due
    to how stringent the testing environment must be. Varying architectures,
    different versions of dependent libraries, unexpected X Window environment
    and window managers, the CA certificates used to generate the
    <filename>cacerts</filename> file, and even any user input or power
    management or screen saver interruptions during the testing can lead to
    various failures. While the known broken tests have been removed, with the
    fix_tests patch above, the graphics tests failures cannot be pre-determined
    (short of removing them all). The best bet for the minimal number of
    failures is to run the test suite in a framebuffer on a different screen
    (Xvfb). Even still, disk I/O can cause failures.</para>

<screen role='nodump'><userinput>export DISPLAY=:20     &amp;&amp;
Xvfb :20 -screen 0 1x1x24 -ac&amp;
echo $!>  Xvfb.pid     &amp;&amp;
make -k jtregcheck     &amp;&amp;
kill -9 `cat Xvfb.pid` &amp;&amp;
unset DISPLAY          &amp;&amp;
rm -f Xvfb.pid</userinput></screen>

    <para>Install the package with the following commands as the
    <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>chmod -v 644 openjdk.build/j2sdk-image/lib/sa-jdi.jar   &amp;&amp;
cp -rv openjdk.build/j2sdk-image /opt/OpenJDK-&openjdk-version; &amp;&amp;
chown -R root:root /opt/OpenJDK-&openjdk-version;</userinput></screen>

    <para>If desired, you may install a .desktop file corresponding to an entry
    in a desktop menu for <command>policytool</command>. First, you need to
    obtain an icon from <xref linkend="icedtea-web"/>:</para>

<screen><userinput>tar -xf ../icedtea-web-&icedtea-web-version;.tar.gz  \
        icedtea-web-&icedtea-web-version;/javaws.png \
        --strip-components=1</userinput></screen>

    <para>Now, as <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>mkdir -pv /usr/share/applications &amp;&amp;

cat &gt; /usr/share/applications/openjdk-7-policytool.desktop &lt;&lt; "EOF" &amp;&amp;
<literal>[Desktop Entry]
Name=OpenJDK Java 7 Policy Tool
Name[pt_BR]=OpenJDK Java 7 - Ferramenta de Pol&#237;tica
Comment=OpenJDK Java 7 Policy Tool
Comment[pt_BR]=OpenJDK Java 7 - Ferramenta de Pol&#237;tica
Exec=/opt/jdk/bin/policytool
Terminal=false
Type=Application
Icon=javaws
Categories=Settings;</literal>
EOF

install -v -Dm644 javaws.png /usr/share/pixmaps/javaws.png</userinput></screen>

    <para>The choice of pt_BR is just an example. You can add any translation
    by adding lines corresponding to your locale, e.g. for fr_FR,
    <quote>Name[fr_FR]=</quote> and <quote>Comment[fr_FR]=</quote> with the
    appropriate text as values.</para>

  </sect2>

  <sect2 role="commands">
    <title>Command Explanations</title>

    <para><command>./autogen.sh</command>: This command forces rebuilding of
    auto-generated files to account for new options added to
    <filename>configure</filename>.</para>

    <para><parameter>--with-jdk-home</parameter>: This switch provides the
    location of the temporary <application>JDK</application>.</para>

    <para><option>--with-pkgversion</option>: This switch can be used
    to modify the version string in addition to "IcedTea".</para>

    <para><parameter>--with-version-suffix</parameter>: This switch appends 
    the given text to the JDK version string.</para>

    <para><parameter>--enable-nss</parameter>: Enable inclusion of NSS
    security provider.</para>

    <para><parameter>--disable-system-kerberos</parameter>: Remove this switch
    if <xref linkend="mitkrb"/> is installed.</para>

    <para><parameter>--with-parallel-jobs</parameter>: Allows to set the number
    of jobs for <command>make</command> equal to the number of processors plus
    one. Note that the default is 2 if this option is not specified. You have to
    explicitely set <option>--with-parallel-jobs=1</option> to disable
    parallel jobs. The SBU given above are with parallel jobs
    disabled.</para>

    <para><command>chmod -v 0644 ...sa-jdi.jar</command>: Fix permissions
    in a generated file so all users can access it.</para>
<!-- Now part of icedtea-sound
    <para><option>- -enable-pulse-java</option>: This switch enables
    building of the pulseaudio libraries (needed to provide a complete
    implementation that is reasonably compatible with the proprietary
    JDK). <xref linkend="pulseaudio"/> needs to be installed.</para>
-->

  </sect2>

  <sect2 role="configuration"
         id="openjdk-config"
         xreflabel="Configuring OpenJDK">
    <title>Configuring OpenJDK</title>

    <sect3>
      <title>Configuration Information</title>

      <para>There are now two <application>OpenJDK</application> SDKs
      installed in <filename>/opt</filename>. You should decide on which one
      you would like to use as the default. For example if you decide to use
      the precompiled <application>OpenJDK</application>, do the following as
      the <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>ln -sfv OpenJDK-&openjdk-version;-bin /opt/jdk</userinput></screen>

      <para>The information below assumes your system is set up using the
      instructions found in <quote><xref
      linkend="postlfs-config-profile"/></quote>. You may need to extract the
      relevant information below and incorporate it into your system's startup
      files if your system is set up differently.</para>

      <para>Add the following <filename>openjdk.sh</filename> shell startup
      file to the <filename>/etc/profile.d</filename> directory with the
      following commands as the <systemitem class="username">root</systemitem>
      user:</para>

<screen role="root"><userinput>cat &gt; /etc/profile.d/openjdk.sh &lt;&lt; "EOF"
<literal># Begin /etc/profile.d/openjdk.sh

# Set JAVA_HOME directory
JAVA_HOME=/opt/jdk

# Set ANT_HOME directory
ANT_HOME=/opt/ant

# Adjust PATH
pathappend $JAVA_HOME/bin PATH
pathappend $ANT_HOME/bin PATH

pathappend $JAVA_HOME/include       C_INCLUDE_PATH
pathappend $JAVA_HOME/include/linux C_INCLUDE_PATH
pathappend $JAVA_HOME/include       CPLUS_INCLUDE_PATH
pathappend $JAVA_HOME/include/linux CPLUS_INCLUDE_PATH

# Auto Java CLASSPATH
# Copy jar files to, or create symlinks in this directory

AUTO_CLASSPATH_DIR=/usr/share/java

pathprepend . CLASSPATH

for dir in `find ${AUTO_CLASSPATH_DIR} -type d 2>/dev/null`; do
    pathappend $dir CLASSPATH
done

for jar in `find ${AUTO_CLASSPATH_DIR} -name "*.jar" 2>/dev/null`; do
    pathappend $jar CLASSPATH
done

export JAVA_HOME ANT_HOME CLASSPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH
unset AUTO_CLASSPATH_DIR dir jar

# End /etc/profile.d/openjdk.sh</literal>
EOF</userinput></screen>

    <para>Finally, add the man pages to <application>man_db</application>'s
    configuration. As the <systemitem class="username">root</systemitem>
    user:</para>

<screen role="root"><userinput>cat >> /etc/profile.d/extrapaths.sh &lt;&lt; "EOF" &amp;&amp;
# Begin Java addition
<literal>pathappend /opt/jdk/man       MANPATH
# End Java addition</literal>
EOF


cat &gt;&gt; /etc/man_db.conf &lt;&lt; "EOF" &amp;&amp;
<literal># Begin Java addition
MANDATORY_MANPATH     /opt/jdk/man
MANPATH_MAP           /opt/jdk/bin     /opt/jdk/man
MANDB_MAP             /opt/jdk/man     /var/cache/man/jdk
# End Java addition</literal>
EOF

mandb -c /opt/jdk/man</userinput></screen>

    <para>To test if the man pages are correctly installed, issue
    <command>source /etc/profile</command> and <command>man java</command> to
    display the respective man page.</para>

    </sect3>

    <sect3 id="ojdk-certs">
      <title>Install or update the JRE Certificate Authority Certificates
      (cacerts) file</title>

      <para>Use the following procedure to check if the
      <filename>cacerts</filename> file was successfully installed during the
      OpenJDK build. Also, if the <xref linkend="cacerts"/> have been updated,
      the following instructions will generate a new JRE
      <filename>cacerts</filename> file. First, check if the
      <filename>cacerts</filename> have been successfully installed: </para>

<screen role="root"><userinput>cd /opt/jdk
bin/keytool -list -keystore jre/lib/security/cacerts</userinput></screen>

      <para>At the prompt "Enter keystore password:", press the "Enter" key if
      there is no keystore password defined. If the
      <filename>cacerts</filename> were installed correctly, you will see a
      list of the certificates with related information for each one. If not,
      you need to manually install them. First, generate the
      <command>mkcacerts</command> script as the
      <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>cat &gt; /opt/jdk/bin/mkcacerts &lt;&lt; "EOF"
<literal>#!/bin/sh
# Simple script to extract x509 certificates and create a JRE cacerts file.

function get_args()
    {
        if test -z "${1}" ; then
            showhelp
            exit 1
        fi

        while test -n "${1}" ; do
            case "${1}" in
                -f | --cafile)
                    check_arg $1 $2
                    CAFILE="${2}"
                    shift 2
                    ;;
                -d | --cadir)
                    check_arg $1 $2
                    CADIR="${2}"
                    shift 2
                    ;;
                -o | --outfile)
                    check_arg $1 $2
                    OUTFILE="${2}"
                    shift 2
                    ;;
                -k | --keytool)
                    check_arg $1 $2
                    KEYTOOL="${2}"
                    shift 2
                    ;;
                -s | --openssl)
                    check_arg $1 $2
                    OPENSSL="${2}"
                    shift 2
                    ;;
                -h | --help)
                    showhelp
                    exit 0
                    ;;
                *)
                    showhelp
                    exit 1
                    ;;
            esac
        done
    }

function check_arg()
    {
        echo "${2}" | grep -v "^-" > /dev/null
        if [ -z "$?" -o ! -n "$2" ]; then
            echo "Error:  $1 requires a valid argument."
            exit 1
        fi
    }

# The date binary is not reliable on 32bit systems for dates after 2038
function mydate()
    {
        local y=$( echo $1 | cut -d" " -f4 )
        local M=$( echo $1 | cut -d" " -f1 )
        local d=$( echo $1 | cut -d" " -f2 )
        local m

        if [ ${d} -lt 10 ]; then d="0${d}"; fi

        case $M in
            Jan) m="01";;
            Feb) m="02";;
            Mar) m="03";;
            Apr) m="04";;
            May) m="05";;
            Jun) m="06";;
            Jul) m="07";;
            Aug) m="08";;
            Sep) m="09";;
            Oct) m="10";;
            Nov) m="11";;
            Dec) m="12";;
        esac

        certdate="${y}${m}${d}"
    }

function showhelp()
    {
        echo "`basename ${0}` creates a valid cacerts file for use with IcedTea."
        echo ""
        echo "        -f  --cafile     The path to a file containing PEM"
        echo "                         formated CA certificates. May not be"
        echo "                         used with -d/--cadir."
        echo ""
        echo "        -d  --cadir      The path to a directory of PEM formatted"
        echo "                         CA certificates. May not be used with"
        echo "                         -f/--cafile."
        echo ""
        echo "        -o  --outfile    The path to the output file."
        echo ""
        echo "        -k  --keytool    The path to the java keytool utility."
        echo ""
        echo "        -s  --openssl    The path to the openssl utility."
        echo ""
        echo "        -h  --help       Show this help message and exit."
        echo ""
        echo ""
    }

# Initialize empty variables so that the shell does not pollute the script
CAFILE=""
CADIR=""
OUTFILE=""
OPENSSL=""
KEYTOOL=""
certdate=""
date=""
today=$( date +%Y%m%d )

# Process command line arguments
get_args ${@}

# Handle common errors
if test "${CAFILE}x" == "x" -a "${CADIR}x" == "x" ; then
    echo "ERROR!  You must provide an x509 certificate store!"
    echo "\'$(basename ${0}) --help\' for more info."
    echo ""
    exit 1
fi

if test "${CAFILE}x" != "x" -a "${CADIR}x" != "x" ; then
    echo "ERROR!  You cannot provide two x509 certificate stores!"
    echo "\'$(basename ${0}) --help\' for more info."
    echo ""
    exit 1
fi

if test "${KEYTOOL}x" == "x" ; then
    echo "ERROR!  You must provide a valid keytool program!"
    echo "\'$(basename ${0}) --help\' for more info."
    echo ""
    exit 1
fi

if test "${OPENSSL}x" == "x" ; then
    echo "ERROR!  You must provide a valid path to openssl!"
    echo "\'$(basename ${0}) --help\' for more info."
    echo ""
    exit 1
fi

if test "${OUTFILE}x" == "x" ; then
    echo "ERROR!  You must provide a valid output file!"
    echo "\'$(basename ${0}) --help\' for more info."
    echo ""
    exit 1
fi

# Get on with the work

# If using a CAFILE, split it into individual files in a temp directory
if test "${CAFILE}x" != "x" ; then
    TEMPDIR=`mktemp -d`
    CADIR="${TEMPDIR}"

    # Get a list of staring lines for each cert
    CERTLIST=`grep -n "^-----BEGIN" "${CAFILE}" | cut -d ":" -f 1`

    # Get a list of ending lines for each cert
    ENDCERTLIST=`grep -n "^-----END" "${CAFILE}" | cut -d ":" -f 1`

    # Start a loop
    for certbegin in `echo "${CERTLIST}"` ; do
        for certend in `echo "${ENDCERTLIST}"` ; do
            if test "${certend}" -gt "${certbegin}"; then
                break
            fi
        done
        sed -n "${certbegin},${certend}p" "${CAFILE}" > "${CADIR}/${certbegin}.pem"
        keyhash=`${OPENSSL} x509 -noout -in "${CADIR}/${certbegin}.pem" -hash`
        echo "Generated PEM file with hash:  ${keyhash}."
    done
fi

# Write the output file
for cert in `find "${CADIR}" -type f -name "*.pem" -o -name "*.crt"`
do

    # Make sure the certificate date is valid...
    date=$( ${OPENSSL} x509 -enddate -in "${cert}" -noout | sed 's/^notAfter=//' )
    mydate "${date}"
    if test "${certdate}" -lt "${today}" ; then
        echo "${cert} expired on ${certdate}! Skipping..."
        unset date certdate
        continue
    fi
    unset date certdate
    ls "${cert}"
    tempfile=`mktemp`
    certbegin=`grep -n "^-----BEGIN" "${cert}" | cut -d ":" -f 1`
    certend=`grep -n "^-----END" "${cert}" | cut -d ":" -f 1`
    sed -n "${certbegin},${certend}p" "${cert}" > "${tempfile}"
    echo yes | env LC_ALL=C "${KEYTOOL}" -import                     \
                                         -alias `basename "${cert}"` \
                                         -keystore "${OUTFILE}"      \
                                         -storepass 'changeit'       \
                                         -file "${tempfile}"
    rm "${tempfile}"
done

if test "${TEMPDIR}x" != "x" ; then
    rm -rf "${TEMPDIR}"
fi
exit 0</literal>
EOF

chmod -v 755 /opt/jdk/bin/mkcacerts</userinput></screen>
 
  <note>
    <para>
      Doing a very large copy/paste directly to a terminal may result in a
      corrupted file.  Copying to an editor may overcome this issue.
    </para>
  </note>

    <para>If you need to generate a <filename>cacerts</filename> file,
    and there is already one in
    <filename class="directory">/opt/jdk/jre/lib/security</filename>, it
    is better to make a backup. Then, you can create a new one, as the
    <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>/opt/jdk/bin/mkcacerts            \
        -d "/etc/ssl/certs/"      \
        -k "/opt/jdk/bin/keytool" \
        -s "/usr/bin/openssl"     \
        -o "/opt/jdk/jre/lib/security/cacerts"</userinput></screen>

    </sect3>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Libraries</segtitle>
      <segtitle>Installed Directory</segtitle>

      <seglistitem>
        <seg>appletviewer, apt, extcheck, idlj, jar,
        jarsigner, java, javac, javadoc, javah, javap, java-rmi.cgi,
        jcmd, jconsole, jdb, jhat, jinfo, jmap, jps,
        jrunscript, jsadebugd, jstack, jstat, jstatd, keytool, mkcacerts,
        native2ascii, orbd, pack200, policytool, rmic, rmid, rmiregistry,
        schemagen, serialver, servertool, tnameserv, unpack200,
        wsgen, wsimport, and xjc</seg>
        <seg>/opt/OpenJDK-&openjdk-version;/lib/*, and
        /opt/OpenJDK-&openjdk-version;/jre/lib/*</seg>
        <seg>/opt/OpenJDK-&openjdk-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="appletviewer">
        <term><command>appletviewer</command></term>
        <listitem>
          <para>allows you to run applets outside of a web browser.</para>
          <indexterm zone="openjdk appletviewer">
            <primary sortas="b-appletviewer">appletviewer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="apt">
        <term><command>apt</command></term>
        <listitem>
          <para>is an annotation processing tool.</para>
          <indexterm zone="openjdk apt">
            <primary sortas="b-apt">apt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="extcheck">
        <term><command>extcheck</command></term>
        <listitem>
          <para>checks a specified jar file for title and version conflicts
          with any extensions installed in the
          <application>OpenJDK</application> software.</para>
          <indexterm zone="openjdk extcheck">
            <primary sortas="b-extcheck">extcheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="idlj">
        <term><command>idlj</command></term>
        <listitem>
          <para>generates Java bindings from a given IDL file.</para>
          <indexterm zone="openjdk idlj">
            <primary sortas="b-idlj">idlj</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jar">
        <term><command>jar</command></term>
        <listitem>
          <para>combines multiple files into a single jar archive.</para>
          <indexterm zone="openjdk jar">
            <primary sortas="b-jar">jar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jarsigner">
        <term><command>jarsigner</command></term>
        <listitem>
          <para>signs jar files and verifies the signatures and integrity
          of a signed jar file.</para>
          <indexterm zone="openjdk jarsigner">
            <primary sortas="b-jarsigner">jarsigner</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="java-prog">
        <term><command>java</command></term>
        <listitem>
          <para>launches a Java application by starting a Java runtime
          environment, loading a specified class and invoking its main
          method.</para>
          <indexterm zone="openjdk java-prog">
            <primary sortas="b-java-prog">java</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="javac">
        <term><command>javac</command></term>
        <listitem>
          <para>reads class and interface definitions, written in the
          Java programming language, and compiles them into bytecode
          class files.</para>
          <indexterm zone="openjdk javac">
            <primary sortas="b-javac">javac</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="javadoc">
        <term><command>javadoc</command></term>
        <listitem>
          <para>parses the declarations and documentation comments in a
          set of Java source files and produces a corresponding set of
          HTML pages describing the classes, interfaces,constructors,
          methods, and fields.</para>
          <indexterm zone="openjdk javadoc">
            <primary sortas="b-javadoc">javadoc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="javah">
        <term><command>javah</command></term>
        <listitem>
          <para>generates C header and source files
          that are needed to implement native methods.</para>
          <indexterm zone="openjdk javah">
            <primary sortas="b-javah">javah</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="javap">
        <term><command>javap</command></term>
        <listitem>
          <para>disassembles a Java class file.</para>
          <indexterm zone="openjdk javap">
            <primary sortas="b-javap">javap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="java-rmi.cgi">
        <term><command>java-rmi.cgi</command></term>
        <listitem>
          <para>is the Java RMI client.</para>
          <indexterm zone="openjdk java-rmi.cgi">
            <primary sortas="b-java-rmi.cgi">java-rmi.cgi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jcmd">
        <term><command>jcmd</command></term>
        <listitem>
          <para>is a utility to send diagnostic command requests to a running
          Java Virtual Machine.</para>
          <indexterm zone="openjdk jcmd">
            <primary sortas="b-jcmd">jcmd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jconsole">
        <term><command>jconsole</command></term>
        <listitem>
          <para>is a graphical console tool to monitor and manage both
          local and remote Java applications and virtual machines.</para>
          <indexterm zone="openjdk jconsole">
            <primary sortas="b-jconsole">jconsole</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jdb">
        <term><command>jdb</command></term>
        <listitem>
          <para>is a simple command-line debugger for Java classes.</para>
          <indexterm zone="openjdk jdb">
            <primary sortas="b-jdb">jdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jhat">
        <term><command>jhat</command></term>
        <listitem>
          <para>parses a java heap dump file and allows viewing
          in a web browser.</para>
          <indexterm zone="openjdk jhat">
            <primary sortas="b-jhat">jhat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jinfo">
        <term><command>jinfo</command></term>
        <listitem>
          <para>prints Java configuration information for a given Java
          process, core file, or a remote debug server.</para>
          <indexterm zone="openjdk jinfo">
            <primary sortas="b-jinfo">jinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jmap">
        <term><command>jmap</command></term>
        <listitem>
          <para>prints shared object memory maps or heap memory details
          of a given process, core file, or a remote debug server.</para>
          <indexterm zone="openjdk jmap">
            <primary sortas="b-jmap">jmap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jps">
        <term><command>jps</command></term>
        <listitem>
          <para>lists the instrumented JVMs on the target system.</para>
          <indexterm zone="openjdk jps">
            <primary sortas="b-jps">jps</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jrunscript">
        <term><command>jrunscript</command></term>
        <listitem>
          <para>is a command line script shell.</para>
          <indexterm zone="openjdk jrunscript">
            <primary sortas="b-jrunscript">jrunscript</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jsadebugd">
        <term><command>jsadebugd</command></term>
        <listitem>
          <para>attaches to a Java process or core file and acts as a
          debug server.</para>
          <indexterm zone="openjdk jsadebugd">
            <primary sortas="b-jsadebugd">jsadebugd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jstack">
        <term><command>jstack</command></term>
        <listitem>
          <para>prints Java stack traces of Java threads for a given
          Java process, core file, or a remote debug server.</para>
          <indexterm zone="openjdk jstack">
            <primary sortas="b-jstack">jstack</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jstat">
        <term><command>jstat</command></term>
        <listitem>
          <para>displays performance statistics for an instrumented JVM.</para>
          <indexterm zone="openjdk jstat">
            <primary sortas="b-jstat">jstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="jstatd">
        <term><command>jstatd</command></term>
        <listitem>
          <para>is an RMI server application that monitors for the creation
          and termination of instrumented JVMs.</para>
          <indexterm zone="openjdk jstatd">
            <primary sortas="b-jstatd">jstatd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="keytool">
        <term><command>keytool</command></term>
        <listitem>
          <para>is a key and certificate management utility.</para>
          <indexterm zone="openjdk keytool">
            <primary sortas="b-keytool">keytool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkcacerts">
        <term><command>mkcacerts</command></term>
        <listitem>
          <para> is a simple script to extract x509 certificates and create
          a JRE cacerts file using <command>keytool</command>.</para>
          <indexterm zone="openjdk mkcacerts">
            <primary sortas="b-mkcacerts">mkcacerts</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="native2ascii">
        <term><command>native2ascii</command></term>
        <listitem>
          <para> converts files that contain non-supported character encoding
          into files containing Latin-1 or Unicode-encoded characters.</para>
          <indexterm zone="openjdk native2ascii">
            <primary sortas="b-native2ascii">native2ascii</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="orbd">
        <term><command>orbd</command></term>
        <listitem>
          <para>is used to enable clients to transparently locate and invoke
          persistent objects on servers in the CORBA environment.</para>
          <indexterm zone="openjdk orbd">
            <primary sortas="b-orbd">orbd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pack200">
        <term><command>pack200</command></term>
        <listitem>
          <para>is a Java application that transforms a jar file into a
          compressed pack200 file using the Java gzip compressor.</para>
          <indexterm zone="openjdk pack200">
            <primary sortas="b-pack200">pack200</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="policytool">
        <term><command>policytool</command></term>
        <listitem>
          <para>creates and manages a policy file graphically.</para>
          <indexterm zone="openjdk policytool">
            <primary sortas="b-policytool">policytool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rmic">
        <term><command>rmic</command></term>
        <listitem>
          <para>generates stub and skeleton class files for remote objects
          from the names of compiled Java classes that contain remote
          object implementations.</para>
          <indexterm zone="openjdk rmic">
            <primary sortas="b-rmic">rmic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rmid">
        <term><command>rmid</command></term>
        <listitem>
          <para>starts the activation system daemon.</para>
          <indexterm zone="openjdk rmid">
            <primary sortas="b-rmid">rmid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rmiregistry">
        <term><command>rmiregistry</command></term>
        <listitem>
          <para>creates and starts a remote object registry on the specified
          port on the current host.</para>
          <indexterm zone="openjdk rmiregistry">
            <primary sortas="b-rmiregistry">rmiregistry</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="schemagen">
        <term><command>schemagen</command></term>
        <listitem>
          <para>is a Java XML binding schema generator.</para>
          <indexterm zone="openjdk schemagen">
            <primary sortas="b-schemagen">schemagen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="serialver">
        <term><command>serialver</command></term>
        <listitem>
          <para>returns the serialVersionUID for one or more classes in a
          form suitable for copying into an evolving class.</para>
          <indexterm zone="openjdk serialver">
            <primary sortas="b-serialver">serialver</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="servertool">
        <term><command>servertool</command></term>
        <listitem>
          <para>provides an ease-of-use interface for application programmers
          to register, unregister, startup and shutdown a server.</para>
          <indexterm zone="openjdk servertool">
            <primary sortas="b-servertool">servertool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tnameserv">
        <term><command>tnameserv</command></term>
        <listitem>
          <para>starts the Java IDL name server.</para>
          <indexterm zone="openjdk tnameserv">
            <primary sortas="b-tnameserv">tnameserv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="unpack200">
        <term><command>unpack200</command></term>
        <listitem>
          <para>is a native implementation that transforms a packed file
          produced by <application>pack200</application> into a jar
          file.</para>
          <indexterm zone="openjdk unpack200">
            <primary sortas="b-unpack200">unpack200</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="wsgen">
        <term><command>wsgen</command></term>
        <listitem>
          <para>generates JAX-WS portable artifacts used in JAX-WS
          web services.</para>
          <indexterm zone="openjdk wsgen">
            <primary sortas="b-wsgen">wsgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="wsimport">
        <term><command>wsimport</command></term>
        <listitem>
          <para>generates JAX-WS portable artifacts.</para>
          <indexterm zone="openjdk wsimport">
            <primary sortas="b-wsimport">wsimport</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xjc">
        <term><command>xjc</command></term>
        <listitem>
          <para>is a Java XML binding compiler.</para>
          <indexterm zone="openjdk xjc">
            <primary sortas="b-xjc">xjc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
